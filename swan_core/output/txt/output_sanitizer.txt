<org.springframework.core.env.MutablePropertySources: void replace(java.lang.String,org.springframework.core.env.PropertySource)> ->_SANITIZER_
<javax.servlet.http.NoBodyResponse: java.lang.String encodeURL(java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang.StringEscapeUtils: java.lang.String escapeXml(java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang3.text.WordUtils: java.lang.String initials(java.lang.String,char[])> ->_SANITIZER_
<org.jboss.resteasy.util.Encode: java.lang.String pathParamReplacement(java.lang.String,java.util.List)> ->_SANITIZER_
<zemberek.lm.compression.DataInfo: byte[] encode(int,int,int)> ->_SANITIZER_
<org.apache.commons.codec.net.URLCodec: byte[] encode(byte[])> ->_SANITIZER_
<org.apache.commons.lang.CharUtils: java.lang.String unicodeEscaped(char)> ->_SANITIZER_
<javax.servlet.http.NoBodyResponse: java.lang.String encodeUrl(java.lang.String)> ->_SANITIZER_
<org.codehaus.jackson.Base64Variant: java.lang.String encode(byte[],boolean)> ->_SANITIZER_
<org.apache.commons.lang.CharUtils: java.lang.String unicodeEscaped(java.lang.Character)> ->_SANITIZER_
<org.jboss.resteasy.util.Base64: byte[] encodeBytesToBytes(byte[])> ->_SANITIZER_
<org.apache.avro.io.EncoderFactory: org.apache.avro.io.JsonEncoder jsonEncoder(org.apache.avro.Schema,java.io.OutputStream,boolean)> ->_SANITIZER_
<org.parosproxy.paros.extension.encoder.Base64: void encode(java.nio.ByteBuffer,java.nio.ByteBuffer)> ->_SANITIZER_
<com.google.common.escape.ArrayBasedCharEscaper: java.lang.String escape(java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang.StringUtils: java.lang.String stripEnd(java.lang.String,java.lang.String)> ->_SANITIZER_
<org.jboss.resteasy.specimpl.UriBuilderImpl: javax.ws.rs.core.UriBuilder replacePath(java.lang.String)> ->_SANITIZER_
<org.jboss.resteasy.util.Encode: java.lang.String encodePathAsIs(java.lang.String)> ->_SANITIZER_
<Zql.TokenMgrError: java.lang.String addEscapes(java.lang.String)> ->_SANITIZER_
<org.apache.commons.vfs2.util.DefaultCryptor: java.lang.String encode(byte[])> ->_SANITIZER_
<javassist.CodeConverter: void replaceNew(javassist.CtClass,javassist.CtClass,java.lang.String)> ->_SANITIZER_
<com.teleatlas.global.common.util.dbunit.AbstractCreateSchemaBuilder: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)> ->_SANITIZER_
<org.apache.avro.io.EncoderFactory: org.apache.avro.io.JsonEncoder jsonEncoder(org.apache.avro.Schema,org.codehaus.jackson.JsonGenerator)> ->_SANITIZER_
<org.zkoss.lang.JavaScriptEscape: void escapeJavaScript(char[],int,int,java.io.Writer)> ->_SANITIZER_
<org.apache.commons.lang.StringEscapeUtils: java.lang.String escapeSql(java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)> ->_SANITIZER_
<org.apache.commons.configuration.PropertiesConfigurationLayout: java.lang.String stripCommentChar(java.lang.String,boolean)> ->_SANITIZER_
<javassist.CodeConverter: void replaceFieldWrite(javassist.CtField,javassist.CtClass,java.lang.String)> ->_SANITIZER_
<org.zkoss.lang.JavaScriptEscape: java.lang.String escapeJavaScriptMinimal(java.lang.String)> ->_SANITIZER_
<org.apache.commons.vfs2.provider.UriParser: java.lang.String encode(java.lang.String,char[])> ->_SANITIZER_
<org.jboss.resteasy.util.Base64: void encode(java.nio.ByteBuffer,java.nio.ByteBuffer)> ->_SANITIZER_
<org.apache.commons.lang.StringUtils: java.lang.String replaceEach(java.lang.String,java.lang.String[],java.lang.String[],boolean,int)> ->_SANITIZER_
<org.apache.commons.lang3.text.StrSubstitutor: java.lang.String replace(java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang.WordUtils: java.lang.String capitalize(java.lang.String,char[])> ->_SANITIZER_
<org.apache.http.util.EncodingUtils: java.lang.String getString(byte[],int,int,java.lang.String)> ->_SANITIZER_
<org.jboss.resteasy.util.Base64: byte[] encode3to4(byte[],int,int,byte[],int,int)> ->_SANITIZER_
<com.zones.model.settings.Serializer: java.lang.String escape(java.lang.String)> ->_SANITIZER_
<org.antlr.v4.runtime.TokenStreamRewriter: void replace(java.lang.String,int,int,java.lang.Object)> ->_SANITIZER_
<org.apache.commons.lang3.StringUtils: java.lang.String replacePattern(java.lang.String,java.lang.String,java.lang.String)> ->_SANITIZER_
<org.apache.xerces.impl.xpath.regex.RangeToken: java.lang.String escapeCharInCharClass(int)> ->_SANITIZER_
<org.apache.commons.lang3.StringUtils: java.lang.String replaceEach(java.lang.String,java.lang.String[],java.lang.String[],boolean,int)> ->_SANITIZER_
<org.apache.xerces.impl.XMLEntityManager: java.lang.String getPathWithoutEscapes(java.lang.String)> ->_SANITIZER_
<org.parosproxy.paros.core.scanner.VariantXMLQuery: java.lang.String encodeParameter(java.lang.String,boolean,boolean)> ->_SANITIZER_
<com.zones.model.ZoneSettings: java.lang.String escape(java.lang.String)> ->_SANITIZER_
<org.apache.commons.codec.net.QuotedPrintableCodec: byte[] encode(byte[])> ->_SANITIZER_
<javassist.convert.TransformAccessArrayField: java.lang.String getStoreReplacementSignature(int)> ->_SANITIZER_
<com.mchange.v1.db.sql.SqlUtils: java.lang.String escapeAsTimestamp(java.util.Date)> ->_SANITIZER_
<org.tukaani.xz.XZOutputStream: void encodeStreamFlags(byte[],int)> ->_SANITIZER_
<org.zkoss.idom.impl.AbstractTextual: org.w3c.dom.Text replaceWholeText(java.lang.String)> ->_SANITIZER_
<org.jboss.resteasy.util.Encode: java.lang.String encodePath(java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int)> ->_SANITIZER_
<org.parosproxy.paros.extension.encoder.Encoder: java.lang.String getURLEncode(java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang3.text.WordUtils: java.lang.String capitalize(java.lang.String,char[])> ->_SANITIZER_
<org.apache.xerces.impl.xpath.regex.REUtil: java.lang.String stripExtendedComment(java.lang.String)> ->_SANITIZER_
<org.apache.commons.codec.binary.Hex: byte[] encode(byte[])> ->_SANITIZER_
<org.zaproxy.zap.network.ZapNTLMEngineImpl: java.lang.String stripDotSuffix(java.lang.String)> ->_SANITIZER_
<com.google.common.base.Ascii: java.lang.String toLowerCase(java.lang.CharSequence)> ->_SANITIZER_
<javassist.expr.Handler: void replace(java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang.StringEscapeUtils: java.lang.String escapeCsv(java.lang.String)> ->_SANITIZER_
<com.google.common.base.Strings: java.lang.String commonPrefix(java.lang.CharSequence,java.lang.CharSequence)> ->_SANITIZER_
<org.apache.commons.configuration.plist.ParseException: java.lang.String add_escapes(java.lang.String)> ->_SANITIZER_
<org.jboss.resteasy.util.Encode: java.lang.String encodeFragmentAsIs(java.lang.String)> ->_SANITIZER_
<com.google.common.hash.AbstractHasher: com.google.common.hash.Hasher putUnencodedChars(java.lang.CharSequence)> ->_SANITIZER_
<org.apache.commons.lang.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int)> ->_SANITIZER_
<org.parosproxy.paros.extension.encoder.Base64: java.lang.String encodeObject(java.io.Serializable)> ->_SANITIZER_
<org.apache.xerces.impl.xs.opti.SchemaDOM: java.lang.String escapeAttValue(java.lang.String,int)> ->_SANITIZER_
<org.geotools.filter.expression.SimpleFeaturePropertyAccessorFactory: java.lang.String stripPrefix(java.lang.String)> ->_SANITIZER_
<org.jboss.resteasy.util.Base64: java.lang.String encodeBytes(byte[],int,int)> ->_SANITIZER_
<org.zkoss.lang.Strings: boolean shallEncodeUnicode(char,java.lang.String)> ->_SANITIZER_
<org.zkoss.zk.ui.Executions: java.lang.String encodeURL(java.lang.String)> ->_SANITIZER_
<org.codehaus.plexus.util.StringUtils: java.lang.String quoteAndEscape(java.lang.String,char,char[],char,boolean)> ->_SANITIZER_
<com.google.common.base.CharMatcher: java.lang.String replaceFrom(java.lang.CharSequence,java.lang.CharSequence)> ->_SANITIZER_
<org.apache.commons.lang3.StringUtils: java.lang.String appendIfMissing(java.lang.String,java.lang.CharSequence,java.lang.CharSequence[])> ->_SANITIZER_
<com.sun.activation.registries.MailcapTokenizer: java.lang.String fixEscapeSequences(java.lang.String)> ->_SANITIZER_
<org.apache.commons.codec.language.Metaphone: java.lang.String encode(java.lang.String)> ->_SANITIZER_
<org.apache.avro.io.BinaryData: int encodeLong(long,byte[],int)> ->_SANITIZER_
<org.zkoss.image.Images: org.zkoss.image.Image encode(java.lang.String,java.awt.image.RenderedImage,float,boolean)> ->_SANITIZER_
<org.apache.commons.lang3.StringUtils: java.lang.String stripEnd(java.lang.String,java.lang.String)> ->_SANITIZER_
<org.codehaus.plexus.util.StringUtils: java.lang.String quoteAndEscape(java.lang.String,char,char[],char[],char,boolean)> ->_SANITIZER_
<org.apache.commons.lang3.text.StrSubstitutor: java.lang.String replace(java.lang.String,int,int)> ->_SANITIZER_
<com.mchange.v2.sql.SqlUtils: java.lang.String escapeBadSqlPatternChars(java.lang.String)> ->_SANITIZER_
<org.jboss.resteasy.util.Encode: java.lang.String encodeFragment(java.lang.String)> ->_SANITIZER_
<org.jboss.resteasy.util.StringContextReplacement: java.lang.String replace(java.lang.String)> ->_SANITIZER_
<org.apache.commons.compress.archivers.zip.FallbackZipEncoding: boolean canEncode(java.lang.String)> ->_SANITIZER_
<org.codehaus.plexus.util.StringUtils: java.lang.String replace(java.lang.String,char,char)> ->_SANITIZER_
<org.codehaus.plexus.util.StringUtils: java.lang.String escape(java.lang.String)> ->_SANITIZER_
<org.codehaus.jackson.Base64Variant: int encodeBase64Partial(int,int,char[],int)> ->_SANITIZER_
<org.apache.xerces.impl.dv.xs.AnyURIDV: java.lang.String encode(java.lang.String)> ->_SANITIZER_
<org.parosproxy.paros.core.scanner.AbstractPlugin: java.lang.String getHTMLEncode(java.lang.String)> ->_SANITIZER_
<org.geotools.filter.function.StaticGeometry: java.lang.String strReplace(java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean)> ->_SANITIZER_
<org.zkoss.zul.impl.LabelImageElement: java.lang.String getEncodedImageURL()> ->_SANITIZER_
<org.jboss.resteasy.util.PathHelper: java.lang.String getEncodedPathInfo(java.lang.String,java.lang.String)> ->_SANITIZER_
<org.apache.commons.vfs2.util.UserAuthenticatorUtils: java.lang.String toString(char[])> ->_SANITIZER_
<org.jdom.output.XMLOutputter: java.lang.String escapeAttributeEntities(java.lang.String)> ->_SANITIZER_
<org.codehaus.plexus.util.Base64: byte[] encodeBase64(byte[],boolean)> ->_SANITIZER_
<org.codehaus.plexus.util.StringUtils: java.lang.String escape(java.lang.String,char[],char)> ->_SANITIZER_
<zemberek.core.io.Words: java.lang.String capitalizeFully(java.lang.String,char[])> ->_SANITIZER_
<org.apache.commons.lang.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)> ->_SANITIZER_
<org.apache.thrift.EncodingUtils: void encodeBigEndian(int,byte[],int)> ->_SANITIZER_
<org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding: java.nio.ByteBuffer encode(java.lang.String)> ->_SANITIZER_
<org.zkoss.image.encoder.ImageEncoders: java.lang.Class setEncoderClass(java.lang.String,java.lang.Class)> ->_SANITIZER_
<org.jboss.resteasy.specimpl.UriBuilderImpl: javax.ws.rs.core.UriBuilder replaceMatrixParam(java.lang.String,java.lang.Object[])> ->_SANITIZER_
<org.geotools.geojson.feature.FeatureTypeAttributeIO: java.lang.String encode(java.lang.String,java.lang.Object)> ->_SANITIZER_
<edu.berkeley.nlp.lm.io.LmReaders: edu.berkeley.nlp.lm.ContextEncodedProbBackoffLm readContextEncodedLmFromArpa(java.lang.String,edu.berkeley.nlp.lm.WordIndexer,edu.berkeley.nlp.lm.ConfigOptions,int)> ->_SANITIZER_
<org.apache.http.impl.auth.DigestScheme: java.lang.String encode(byte[])> ->_SANITIZER_
<org.zkoss.zhtml.impl.AbstractTag: java.lang.String getEncodedURL(java.lang.String)> ->_SANITIZER_
<org.json.simple.JSONObject: java.lang.String escape(java.lang.String)> ->_SANITIZER_
<org.zkoss.zkmax.zul.fusionchart.impl.Utils: java.lang.String escapeXML(java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang3.StringUtils: java.lang.String prependIfMissingIgnoreCase(java.lang.String,java.lang.CharSequence,java.lang.CharSequence[])> ->_SANITIZER_
<org.apache.avro.io.BinaryData: int encodeFloat(float,byte[],int)> ->_SANITIZER_
<org.parosproxy.paros.core.scanner.Alert: java.lang.String replaceEntity(java.lang.String)> ->_SANITIZER_
<org.codehaus.plexus.util.Base64: byte[] encode(byte[])> ->_SANITIZER_
<org.apache.commons.lang3.text.StrSubstitutor: boolean replaceIn(java.lang.StringBuilder,int,int)> ->_SANITIZER_
<org.apache.commons.lang3.StringUtils: java.lang.String stripToNull(java.lang.String)> ->_SANITIZER_
<javassist.CodeConverter: void replaceFieldRead(javassist.CtField,javassist.CtClass,java.lang.String)> ->_SANITIZER_
<org.apache.commons.codec.binary.BinaryCodec: byte[] encode(byte[])> ->_SANITIZER_
<org.apache.commons.lang3.StringUtils: java.lang.String appendIfMissingIgnoreCase(java.lang.String,java.lang.CharSequence,java.lang.CharSequence[])> ->_SANITIZER_
<org.parosproxy.paros.extension.encoder.Base64: java.lang.String encodeBytes(byte[],int,int,int)> ->_SANITIZER_
<org.parosproxy.paros.extension.encoder.Base64: byte[] encode3to4(byte[],int,int,byte[],int,int)> ->_SANITIZER_
<org.apache.commons.httpclient.util.URIUtil: java.lang.String encode(java.lang.String,java.util.BitSet,java.lang.String)> ->_SANITIZER_
<org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String replacePlaceholders(java.lang.String,org.aopalliance.intercept.MethodInvocation,java.lang.Object,java.lang.Throwable,long)> ->_SANITIZER_
<org.zaproxy.zap.spider.parser.SpiderHtmlFormParser: java.lang.String buildEncodedUrlQuery(java.util.List)> ->_SANITIZER_
<org.apache.commons.lang3.StringUtils: java.lang.String toEncodedString(byte[],java.nio.charset.Charset)> ->_SANITIZER_
<org.apache.commons.httpclient.util.URIUtil: java.lang.String encodePathQuery(java.lang.String,java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)> ->_SANITIZER_
<zemberek.core.io.Words: java.lang.String initials(java.lang.String,char[])> ->_SANITIZER_
<org.apache.commons.configuration.plist.TokenMgrError: java.lang.String addEscapes(java.lang.String)> ->_SANITIZER_
<org.apache.commons.vfs2.provider.http.HttpFileObject: java.lang.String encodePath(java.lang.String)> ->_SANITIZER_
<com.tomtom.cpu.coredb.client.impl.OpenlrImpl: java.lang.String encodePoiWithAccessPoint(java.util.UUID,int,int)> ->_SANITIZER_
<org.codehaus.plexus.util.LineOrientedInterpolatingReader: java.lang.String replaceWithInterpolatedValues(java.lang.String,java.util.Map)> ->_SANITIZER_
<org.apache.commons.lang3.StringEscapeUtils: java.lang.String escapeXml(java.lang.String)> ->_SANITIZER_
<org.zkoss.xml.XMLs: java.lang.StringBuffer encodeText(java.lang.StringBuffer,java.lang.String)> ->_SANITIZER_
<org.apache.commons.codec.language.bm.BeiderMorseEncoder: java.lang.String encode(java.lang.String)> ->_SANITIZER_
<org.apache.commons.httpclient.util.URIUtil: java.lang.String encode(java.lang.String,java.util.BitSet)> ->_SANITIZER_
<com.mchange.v1.db.sql.SqlUtils: java.lang.String escapeBadSqlPatternChars(java.lang.String)> ->_SANITIZER_
<org.parosproxy.paros.extension.encoder.Base64: java.lang.String encodeFromFile(java.lang.String)> ->_SANITIZER_
<org.jboss.resteasy.util.Base64: java.lang.String encodeFromFile(java.lang.String)> ->_SANITIZER_
<org.codehaus.plexus.util.StringUtils: java.lang.String stripEnd(java.lang.String,java.lang.String)> ->_SANITIZER_
<zen.core.Zen: java.lang.String sanitize(java.lang.String)> ->_SANITIZER_
<org.jboss.resteasy.specimpl.UriBuilderImpl: javax.ws.rs.core.UriBuilder replaceQueryParam(java.lang.String,java.lang.Object[])> ->_SANITIZER_
<org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])> ->_SANITIZER_
<org.zkoss.lang.JavaScriptEscapeUtil: void escape(char[],int,int,java.io.Writer,org.zkoss.lang.JavaScriptEscapeType,org.zkoss.lang.JavaScriptEscapeLevel)> ->_SANITIZER_
<org.codehaus.plexus.util.StringUtils: java.lang.String replaceOnce(java.lang.String,char,char)> ->_SANITIZER_
<org.zkoss.zul.A: java.lang.String getEncodedHref()> ->_SANITIZER_
<org.jboss.resteasy.util.Base64: java.lang.String encodeObject(java.io.Serializable)> ->_SANITIZER_
<org.zkoss.lang.JavaScriptEscapeUtil: boolean isOctalEscape(java.lang.String,int,int)> ->_SANITIZER_
<org.jboss.resteasy.util.URLUtils: java.lang.String encodePathParamName(java.lang.String)> ->_SANITIZER_
<javax.servlet.http.HttpServletResponseWrapper: java.lang.String encodeURL(java.lang.String)> ->_SANITIZER_
<org.zkoss.zul.Applet: java.lang.String encode(java.lang.String,boolean)> ->_SANITIZER_
<org.codehaus.plexus.util.StringUtils: java.lang.String quoteAndEscape(java.lang.String,char)> ->_SANITIZER_
<org.apache.commons.lang3.text.StrSubstitutor: java.lang.String replace(org.apache.commons.lang3.text.StrBuilder)> ->_SANITIZER_
<javax.servlet.http.HttpServletResponseWrapper: java.lang.String encodeUrl(java.lang.String)> ->_SANITIZER_
<org.apache.xerces.impl.dv.util.HexBin: java.lang.String encode(byte[])> ->_SANITIZER_
<org.zkoss.zk.ui.http.ExecutionImpl: java.lang.String encodeURL(java.lang.String)> ->_SANITIZER_
<org.apache.commons.httpclient.util.URIUtil: java.lang.String encodeQuery(java.lang.String)> ->_SANITIZER_
<org.zaproxy.zap.extension.encoder2.ExtensionEncoder2: void showEncodeDecodeDialog(javax.swing.text.JTextComponent)> ->_SANITIZER_
<org.apache.commons.lang3.StringUtils: java.lang.String strip(java.lang.String)> ->_SANITIZER_
<org.jboss.resteasy.plugins.delegates.ServerCookie: java.lang.String escapeDoubleQuotes(java.lang.String,int,int)> ->_SANITIZER_
<org.apache.commons.lang.text.StrSubstitutor: java.lang.String replace(java.lang.StringBuffer)> ->_SANITIZER_
<org.jboss.resteasy.specimpl.UriBuilderImpl: javax.ws.rs.core.UriBuilder replaceQuery(java.lang.String)> ->_SANITIZER_
<com.google.common.base.Strings: java.lang.String commonSuffix(java.lang.CharSequence,java.lang.CharSequence)> ->_SANITIZER_
<org.apache.log4j.chainsaw.DetailPanel: java.lang.String escape(java.lang.String)> ->_SANITIZER_
<org.dom4j.dom.DOMNodeHelper: void replaceData(org.dom4j.CharacterData,int,int,java.lang.String)> ->_SANITIZER_
<com.google.common.io.BaseEncoding: java.lang.String encode(byte[],int,int)> ->_SANITIZER_
<org.apache.commons.codec.net.QCodec: java.lang.String encode(java.lang.String,java.lang.String)> ->_SANITIZER_
<org.zkoss.lang.Strings: char escapeSpecial(java.lang.CharSequence,char,int,java.lang.String)> ->_SANITIZER_
<org.parosproxy.paros.extension.encoder.Base64: java.lang.String encodeObject(java.io.Serializable,int)> ->_SANITIZER_
<org.apache.commons.vfs2.provider.UriParser: java.lang.String[] encode(java.lang.String[])> ->_SANITIZER_
<org.apache.commons.codec.net.BCodec: java.lang.String encode(java.lang.String,java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang3.StringUtils: java.lang.String prependIfMissing(java.lang.String,java.lang.CharSequence,boolean,java.lang.CharSequence[])> ->_SANITIZER_
<org.apache.commons.httpclient.auth.DigestScheme: java.lang.String encode(byte[])> ->_SANITIZER_
<org.apache.commons.httpclient.util.URIUtil: java.lang.String encodePath(java.lang.String,java.lang.String)> ->_SANITIZER_
<org.zkoss.zul.Style: java.lang.String getEncodedURL()> ->_SANITIZER_
<org.jboss.resteasy.util.Encode: java.lang.String encodeQueryParam(java.lang.String)> ->_SANITIZER_
<org.jboss.resteasy.util.Base64: java.lang.String encodeObject(java.io.Serializable,int)> ->_SANITIZER_
<org.apache.avro.io.BinaryData: int encodeDouble(double,byte[],int)> ->_SANITIZER_
<org.codehaus.plexus.util.LineOrientedInterpolatingReader: java.lang.String findAndReplaceUnlessEscaped(java.lang.String,java.lang.String,java.lang.String)> ->_SANITIZER_
<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String doFormUrlEncode(org.apache.commons.httpclient.NameValuePair[],java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang3.StringUtils: java.lang.String stripAccents(java.lang.String)> ->_SANITIZER_
<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.String replaceBooleanOperators(java.lang.String)> ->_SANITIZER_
<org.jboss.resteasy.util.URLUtils: java.lang.String encodeQueryNameOrValue(java.lang.String)> ->_SANITIZER_
<org.apache.commons.vfs2.provider.UriParser: java.lang.String encode(java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang.StringEscapeUtils: java.lang.String escapeJavaStyleString(java.lang.String,boolean,boolean)> ->_SANITIZER_
<org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,char,char)> ->_SANITIZER_
<org.apache.commons.codec.language.ColognePhonetic: boolean isEncodeEqual(java.lang.String,java.lang.String)> ->_SANITIZER_
<org.apache.xerces.impl.dv.util.Base64: java.lang.String encode(byte[])> ->_SANITIZER_
<org.apache.commons.codec.language.Caverphone: java.lang.String encode(java.lang.String)> ->_SANITIZER_
<org.apache.commons.compress.archivers.zip.NioZipEncoding: boolean canEncode(java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang.WordUtils: java.lang.String uncapitalize(java.lang.String,char[])> ->_SANITIZER_
<org.jboss.resteasy.util.Encode: java.lang.String encodeQueryParamAsIs(java.lang.String)> ->_SANITIZER_
<org.apache.log4j.helpers.Transform: java.lang.String escapeTags(java.lang.String)> ->_SANITIZER_
<org.jboss.resteasy.util.Base64: void encode(java.nio.ByteBuffer,java.nio.CharBuffer)> ->_SANITIZER_
<org.springframework.scheduling.support.CronSequenceGenerator: java.lang.String replaceOrdinals(java.lang.String,java.lang.String)> ->_SANITIZER_
<org.apache.http.util.EncodingUtils: java.lang.String getAsciiString(byte[],int,int)> ->_SANITIZER_
<org.apache.commons.lang.text.StrSubstitutor: java.lang.String replace(java.lang.StringBuffer,int,int)> ->_SANITIZER_
<org.apache.commons.lang.StringUtils: java.lang.String stripStart(java.lang.String,java.lang.String)> ->_SANITIZER_
<org.jboss.resteasy.util.URLUtils: java.lang.String encodePathSegment(java.lang.String)> ->_SANITIZER_
<org.zaproxy.zap.network.ZapNTLMEngineImpl: java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])> ->_SANITIZER_
<org.codehaus.plexus.util.xml.pull.MXParser: void defineEntityReplacementText(java.lang.String,java.lang.String)> ->_SANITIZER_
<org.zkoss.xml.XMLs: java.lang.StringBuffer encodeText(java.lang.StringBuffer,java.lang.String,int,int)> ->_SANITIZER_
<org.apache.commons.lang3.StringEscapeUtils: java.lang.String escapeCsv(java.lang.String)> ->_SANITIZER_
<org.zkoss.zul.Flash: java.lang.String getEncodedSrc()> ->_SANITIZER_
<org.apache.commons.lang3.StringUtils: java.lang.String stripStart(java.lang.String,java.lang.String)> ->_SANITIZER_
<com.google.common.escape.Escapers: java.lang.String computeReplacement(com.google.common.escape.CharEscaper,char)> ->_SANITIZER_
<org.zkoss.lang.Strings: java.lang.String escape(java.lang.String,java.lang.String)> ->_SANITIZER_
<org.codehaus.plexus.util.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int)> ->_SANITIZER_
<org.zkoss.lang.JavaScriptEscape: void escapeJavaScript(char[],int,int,java.io.Writer,org.zkoss.lang.JavaScriptEscapeType,org.zkoss.lang.JavaScriptEscapeLevel)> ->_SANITIZER_
<edu.berkeley.nlp.lm.io.LmReaders: edu.berkeley.nlp.lm.ContextEncodedProbBackoffLm readContextEncodedLmFromArpa(java.lang.String)> ->_SANITIZER_
<org.springframework.util.StringUtils: java.lang.String stripFilenameExtension(java.lang.String)> ->_SANITIZER_
<com.mchange.v1.util.ArrayUtils: java.lang.String toString(char[])> ->_SANITIZER_
<org.apache.commons.codec.net.QuotedPrintableCodec: byte[] encodeQuotedPrintable(java.util.BitSet,byte[])> ->_SANITIZER_
<org.zkoss.lang.JavaScriptEscape: java.lang.String escapeJavaScript(java.lang.String,org.zkoss.lang.JavaScriptEscapeType,org.zkoss.lang.JavaScriptEscapeLevel)> ->_SANITIZER_
<org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)> ->_SANITIZER_
<org.apache.commons.httpclient.util.URIUtil: java.lang.String encodePath(java.lang.String)> ->_SANITIZER_
<org.jdom.output.XMLOutputter: java.lang.String escapeElementEntities(java.lang.String)> ->_SANITIZER_
<org.apache.commons.codec.language.SoundexUtils: int differenceEncoded(java.lang.String,java.lang.String)> ->_SANITIZER_
<org.zkoss.zul.Iframe: java.lang.String getEncodedSrc()> ->_SANITIZER_
<org.apache.commons.lang.StringUtils: java.lang.String strip(java.lang.String)> ->_SANITIZER_
<org.apache.commons.codec.net.QCodec: java.lang.String encode(java.lang.String)> ->_SANITIZER_
<org.apache.maven.scm.provider.AbstractScmProvider: java.lang.String sanitizeTagName(java.lang.String)> ->_SANITIZER_
<org.jboss.resteasy.util.Base64: java.lang.String encodeBytes(byte[],int,int,int)> ->_SANITIZER_
<org.apache.commons.lang.StringEscapeUtils: java.lang.String escapeHtml(java.lang.String)> ->_SANITIZER_
<org.apache.commons.codec.net.BCodec: java.lang.String encode(java.lang.String)> ->_SANITIZER_
<org.geotools.geojson.feature.DefaultAttributeIO: java.lang.String encode(java.lang.String,java.lang.Object)> ->_SANITIZER_
<org.zaproxy.zap.utils.ViewState: java.lang.String encode(java.io.Serializable)> ->_SANITIZER_
<org.zkoss.xml.XMLs: java.lang.String escapeXML(java.lang.String)> ->_SANITIZER_
<com.google.common.escape.CharEscaper: java.lang.String escape(java.lang.String)> ->_SANITIZER_
<com.google.common.primitives.UnsignedBytes: java.lang.String join(java.lang.String,byte[])> ->_SANITIZER_
<ch.csnc.extension.util.Encoding: java.lang.String base64encode(byte[])> ->_SANITIZER_
<org.apache.http.client.utils.URLEncodedUtils: java.lang.String encode(java.lang.String,java.lang.String)> ->_SANITIZER_
<ch.csnc.extension.util.Encoding: java.lang.String urlEncode(java.lang.String)> ->_SANITIZER_
<org.zkoss.xel.fn.StringFns: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)> ->_SANITIZER_
<org.jboss.resteasy.util.Encode: java.lang.String encode(int,java.lang.String[])> ->_SANITIZER_
<org.zkoss.lang.JavaScriptEscape: java.lang.String escapeJavaScript(java.lang.String)> ->_SANITIZER_
<org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])> ->_SANITIZER_
<org.apache.avro.io.BinaryData: int encodeInt(int,byte[],int)> ->_SANITIZER_
<org.geotools.feature.type.DateUtil: void encodeChunk(int,byte[],java.lang.StringBuffer)> ->_SANITIZER_
<org.apache.commons.lang3.StringUtils: java.lang.String appendIfMissing(java.lang.String,java.lang.CharSequence,boolean,java.lang.CharSequence[])> ->_SANITIZER_
<org.apache.commons.lang.StringUtils: java.lang.String stripToNull(java.lang.String)> ->_SANITIZER_
<com.google.common.escape.Escapers: java.lang.String computeReplacement(com.google.common.escape.UnicodeEscaper,int)> ->_SANITIZER_
<org.apache.commons.lang3.StringUtils: java.lang.String strip(java.lang.String,java.lang.String)> ->_SANITIZER_
<org.apache.commons.compress.archivers.zip.FallbackZipEncoding: java.nio.ByteBuffer encode(java.lang.String)> ->_SANITIZER_
<org.codehaus.jackson.Base64Variant: int encodeBase64Chunk(int,char[],int)> ->_SANITIZER_
<org.apache.commons.lang3.StringUtils: java.lang.String replaceEachRepeatedly(java.lang.String,java.lang.String[],java.lang.String[])> ->_SANITIZER_
<hidden.org.codehaus.plexus.interpolation.util.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int)> ->_SANITIZER_
<org.apache.commons.lang.StringUtils: java.lang.String strip(java.lang.String,java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang.text.StrSubstitutor: java.lang.String replaceSystemProperties(java.lang.Object)> ->_SANITIZER_
<org.apache.commons.lang.StringUtils: java.lang.String replaceEachRepeatedly(java.lang.String,java.lang.String[],java.lang.String[])> ->_SANITIZER_
<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getString(byte[],int,int,java.lang.String)> ->_SANITIZER_
<org.apache.commons.httpclient.util.URIUtil: java.lang.String encodePathQuery(java.lang.String)> ->_SANITIZER_
<org.apache.commons.codec.binary.BaseNCodec: java.lang.String encodeToString(byte[])> ->_SANITIZER_
<org.apache.commons.lang3.text.StrSubstitutor: java.lang.String replaceSystemProperties(java.lang.Object)> ->_SANITIZER_
<org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[])> ->_SANITIZER_
<org.apache.commons.codec.binary.BaseNCodec: byte[] encode(byte[])> ->_SANITIZER_
<org.apache.commons.lang3.StringEscapeUtils: java.lang.String escapeXml10(java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang3.StringEscapeUtils: java.lang.String escapeXml11(java.lang.String)> ->_SANITIZER_
<org.apache.avro.io.EncoderFactory: org.apache.avro.io.ValidatingEncoder validatingEncoder(org.apache.avro.Schema,org.apache.avro.io.Encoder)> ->_SANITIZER_
<org.parosproxy.paros.extension.encoder.Base64: void encode(java.nio.ByteBuffer,java.nio.CharBuffer)> ->_SANITIZER_
<javassist.convert.TransformAccessArrayField: java.lang.String getLoadReplacementSignature(int)> ->_SANITIZER_
<org.apache.commons.lang3.text.StrSubstitutor: java.lang.String replace(org.apache.commons.lang3.text.StrBuilder,int,int)> ->_SANITIZER_
<org.apache.commons.lang3.text.StrSubstitutor: boolean replaceIn(java.lang.StringBuilder)> ->_SANITIZER_
<org.apache.commons.lang.text.StrSubstitutor: java.lang.String replace(char[])> ->_SANITIZER_
<org.zkoss.zkmax.au.http.AuDownloader: void encode(java.lang.StringBuffer,java.lang.String)> ->_SANITIZER_
<org.zkoss.zk.ui.sys.ComponentsCtrl: java.lang.String encodeId(java.lang.StringBuffer,int)> ->_SANITIZER_
<org.geotools.geojson.GeoJSONUtil: void encode(java.util.Map,java.lang.Object)> ->_SANITIZER_
<org.apache.xerces.impl.xs.traversers.XSDAbstractTraverser: java.lang.String escapeAttValue(java.lang.String,int)> ->_SANITIZER_
<org.zkoss.lang.JavaScriptEscapeUtil: java.lang.String escape(java.lang.String,org.zkoss.lang.JavaScriptEscapeType,org.zkoss.lang.JavaScriptEscapeLevel)> ->_SANITIZER_
<hidden.org.codehaus.plexus.interpolation.util.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)> ->_SANITIZER_
<org.apache.commons.codec.binary.BaseNCodec: long getEncodedLength(byte[])> ->_SANITIZER_
<org.apache.commons.lang.WordUtils: java.lang.String capitalizeFully(java.lang.String,char[])> ->_SANITIZER_
<org.apache.commons.codec.language.ColognePhonetic: java.lang.String encode(java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang.text.StrSubstitutor: java.lang.String replace(java.lang.Object,java.util.Map)> ->_SANITIZER_
<edu.berkeley.nlp.lm.io.LmReaders: edu.berkeley.nlp.lm.ArrayEncodedProbBackoffLm secondPassArrayEncoded(edu.berkeley.nlp.lm.ConfigOptions,edu.berkeley.nlp.lm.io.LmReader,edu.berkeley.nlp.lm.WordIndexer,edu.berkeley.nlp.lm.io.FirstPassCallback,edu.berkeley.nlp.lm.array.LongArray[],boolean,boolean)> ->_SANITIZER_
<org.parosproxy.paros.core.scanner.VariantAbstractQuery: java.lang.String getEncodedValue(org.parosproxy.paros.network.HttpMessage,java.lang.String)> ->_SANITIZER_
<org.geotools.data.BatchFeatureEvent: void replaceFid(java.lang.String,java.lang.String)> ->_SANITIZER_
<org.jboss.resteasy.util.URLUtils: java.lang.String encodePart(java.lang.String,java.lang.String,java.util.BitSet)> ->_SANITIZER_
<org.apache.commons.codec.language.Soundex: java.lang.String encode(java.lang.String)> ->_SANITIZER_
<com.google.common.primitives.Chars: java.lang.String join(java.lang.String,char[])> ->_SANITIZER_
<org.apache.commons.httpclient.util.URIUtil: java.lang.String encodeAll(java.lang.String)> ->_SANITIZER_
<org.apache.http.client.utils.URLEncodedUtils: boolean isEncoded(org.apache.http.HttpEntity)> ->_SANITIZER_
<org.codehaus.plexus.util.StringUtils: java.lang.String replace(java.lang.String,char,char,int)> ->_SANITIZER_
<edu.berkeley.nlp.lm.io.LmReaders: edu.berkeley.nlp.lm.ArrayEncodedProbBackoffLm readArrayEncodedLmFromArpa(java.lang.String,boolean,edu.berkeley.nlp.lm.WordIndexer,edu.berkeley.nlp.lm.ConfigOptions,int)> ->_SANITIZER_
<org.apache.commons.codec.binary.Base64: byte[] encode(byte[])> ->_SANITIZER_
<org.jboss.resteasy.util.Encode: java.lang.String encodeValue(java.lang.String,java.lang.String[])> ->_SANITIZER_
<com.google.common.escape.ArrayBasedUnicodeEscaper: java.lang.String escape(java.lang.String)> ->_SANITIZER_
<org.geotools.geojson.GeoJSONUtil: void encode(java.lang.String,java.lang.Object)> ->_SANITIZER_
<org.apache.commons.httpclient.util.URIUtil: java.lang.String encodeQuery(java.lang.String,java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang3.StringUtils: java.lang.String replaceOnce(java.lang.String,java.lang.String,java.lang.String)> ->_SANITIZER_
<org.apache.commons.codec.language.bm.Rule: java.lang.String stripQuotes(java.lang.String)> ->_SANITIZER_
<org.springframework.aop.aspectj.TypePatternClassFilter: java.lang.String replaceBooleanOperators(java.lang.String)> ->_SANITIZER_
<org.apache.commons.httpclient.util.URIUtil: java.lang.String encodeWithinQuery(java.lang.String,java.lang.String)> ->_SANITIZER_
<com.google.common.net.MediaType: java.lang.String escapeAndQuote(java.lang.String)> ->_SANITIZER_
<com.mchange.v2.util.PatternReplacementMap: java.lang.String attemptReplace(java.lang.String)> ->_SANITIZER_
<org.codehaus.plexus.util.StringUtils: java.lang.String stripStart(java.lang.String,java.lang.String)> ->_SANITIZER_
<org.parosproxy.paros.extension.encoder.Base64: java.lang.String encodeBytes(byte[],int)> ->_SANITIZER_
<org.jboss.resteasy.util.Encode: java.lang.String encodePathSegment(java.lang.String)> ->_SANITIZER_
<com.google.common.escape.UnicodeEscaper: java.lang.String escape(java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang.StringUtils: java.lang.String replaceChars(java.lang.String,char,char)> ->_SANITIZER_
<org.jboss.resteasy.util.Base64: void encodeToFile(byte[],java.lang.String)> ->_SANITIZER_
<com.google.common.base.CharMatcher: java.lang.String replaceFrom(java.lang.CharSequence,char)> ->_SANITIZER_
<org.apache.commons.lang3.text.WordUtils: java.lang.String uncapitalize(java.lang.String,char[])> ->_SANITIZER_
<org.apache.commons.lang.StringEscapeUtils: java.lang.String escapeJava(java.lang.String)> ->_SANITIZER_
<org.apache.commons.httpclient.util.URIUtil: java.lang.String encodeWithinPath(java.lang.String)> ->_SANITIZER_
<org.dom4j.dom.DOMCDATA: void replaceData(int,int,java.lang.String)> ->_SANITIZER_
<org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.String encode(java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang.StringUtils: java.lang.String escape(java.lang.String)> ->_SANITIZER_
<org.apache.commons.codec.language.bm.PhoneticEngine: java.lang.String encode(java.lang.String,org.apache.commons.codec.language.bm.Languages$LanguageSet)> ->_SANITIZER_
<org.zkoss.xml.XMLs: java.lang.String encodeAttribute(java.lang.String)> ->_SANITIZER_
<org.zkoss.zul.Button: java.lang.String getEncodedHref()> ->_SANITIZER_
<zemberek.core.io.Chars: java.lang.String unicodeEscaped(java.lang.Character)> ->_SANITIZER_
<org.zkoss.xml.XMLs: java.lang.String encodeText(java.lang.String)> ->_SANITIZER_
<org.apache.commons.httpclient.util.URIUtil: java.lang.String encodeWithinAuthority(java.lang.String,java.lang.String)> ->_SANITIZER_
<javassist.CtClassType: void replaceClassName(java.lang.String,java.lang.String)> ->_SANITIZER_
<org.apache.commons.vfs2.provider.URLFileName: java.lang.String getPathQueryEncoded(java.lang.String)> ->_SANITIZER_
<org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean)> ->_SANITIZER_
<org.apache.commons.codec.language.AbstractCaverphone: boolean isEncodeEqual(java.lang.String,java.lang.String)> ->_SANITIZER_
<com.google.common.base.CharMatcher: java.lang.String finishCollapseFrom(java.lang.CharSequence,int,int,char,java.lang.StringBuilder,boolean)> ->_SANITIZER_
<org.zkoss.zk.ui.impl.ScopeListeners: void notifyReplaced(java.lang.String,java.lang.Object)> ->_SANITIZER_
<org.apache.commons.configuration.PropertyConverter: java.lang.String escapeListDelimiter(java.lang.String,char)> ->_SANITIZER_
<org.codehaus.jackson.Base64Variant: int encodeBase64Partial(int,int,byte[],int)> ->_SANITIZER_
<ch.csnc.extension.util.Encoding: java.lang.String toHexString(byte[])> ->_SANITIZER_
<org.apache.commons.vfs2.provider.UriParser: void encode(java.lang.StringBuilder,int,int,char[])> ->_SANITIZER_
<org.apache.commons.lang3.StringEscapeUtils: java.lang.String escapeEcmaScript(java.lang.String)> ->_SANITIZER_
<org.codehaus.plexus.util.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)> ->_SANITIZER_
<org.parosproxy.paros.extension.encoder.Base64: java.lang.String encodeBytes(byte[])> ->_SANITIZER_
<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String stripDotSuffix(java.lang.String)> ->_SANITIZER_
<org.codehaus.plexus.util.StringUtils: java.lang.String strip(java.lang.String)> ->_SANITIZER_
<org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding$Simple8BitChar encodeHighChar(char)> ->_SANITIZER_
<org.apache.commons.codec.language.Caverphone2: java.lang.String encode(java.lang.String)> ->_SANITIZER_
<org.apache.commons.codec.language.Caverphone1: java.lang.String encode(java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang.StringEscapeUtils: java.lang.String escapeJavaScript(java.lang.String)> ->_SANITIZER_
<org.codehaus.plexus.util.IOUtil: java.lang.String toString(byte[],java.lang.String,int)> ->_SANITIZER_
<org.apache.commons.lang.text.StrSubstitutor: java.lang.String replace(java.lang.Object)> ->_SANITIZER_
<com.tomtom.cpu.coredb.client.impl.OpenlrImpl: java.lang.String encodeSequenceOfRoads(java.util.List)> ->_SANITIZER_
<org.apache.commons.lang3.text.StrSubstitutor: java.lang.String replace(java.lang.StringBuffer,int,int)> ->_SANITIZER_
<org.jboss.resteasy.util.Encode: java.lang.String encodeFromArray(java.lang.String,java.lang.String[],boolean)> ->_SANITIZER_
<org.dom4j.dom.DOMText: void replaceData(int,int,java.lang.String)> ->_SANITIZER_
<org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding: boolean pushEncodedChar(java.nio.ByteBuffer,char)> ->_SANITIZER_
<org.antlr.v4.runtime.misc.Utils: java.lang.String escapeWhitespace(java.lang.String,boolean)> ->_SANITIZER_
<org.apache.commons.httpclient.util.URIUtil: java.lang.String encodeWithinQuery(java.lang.String)> ->_SANITIZER_
<org.apache.commons.vfs2.provider.URLFileName: java.lang.String getURIEncoded(java.lang.String)> ->_SANITIZER_
<org.jboss.resteasy.util.Hex: java.lang.String encodeHex(byte[])> ->_SANITIZER_
<org.apache.commons.compress.archivers.zip.NioZipEncoding: java.nio.ByteBuffer encode(java.lang.String)> ->_SANITIZER_
<org.apache.commons.codec.language.RefinedSoundex: java.lang.String encode(java.lang.String)> ->_SANITIZER_
<org.apache.xerces.dom.TextImpl: void replaceData(java.lang.String)> ->_SANITIZER_
<org.apache.commons.codec.language.Nysiis: java.lang.String encode(java.lang.String)> ->_SANITIZER_
<javassist.CtClass: void replaceClassName(java.lang.String,java.lang.String)> ->_SANITIZER_
<org.apache.commons.httpclient.auth.NTLM: java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[])> ->_SANITIZER_
<edu.berkeley.nlp.lm.io.LmReaders: edu.berkeley.nlp.lm.ContextEncodedProbBackoffLm readContextEncodedKneserNeyLmFromTextFile(java.util.List,edu.berkeley.nlp.lm.WordIndexer,int,edu.berkeley.nlp.lm.ConfigOptions,java.io.File)> ->_SANITIZER_
<org.parosproxy.paros.extension.encoder.Base64: void encodeToFile(byte[],java.lang.String)> ->_SANITIZER_
<org.apache.commons.configuration.PropertyConverter: java.lang.String escapeDelimiters(java.lang.String,char)> ->_SANITIZER_
<org.jboss.resteasy.util.Base64: byte[] encodeBytesToBytes(byte[],int,int,int)> ->_SANITIZER_
<org.zkoss.lang.Strings: java.lang.StringBuffer escape(java.lang.StringBuffer,java.lang.CharSequence,java.lang.String)> ->_SANITIZER_
<org.codehaus.jackson.Base64Variant: void encodeBase64Chunk(java.lang.StringBuilder,int)> ->_SANITIZER_
<com.google.common.base.Ascii: java.lang.String toUpperCase(java.lang.CharSequence)> ->_SANITIZER_
<org.springframework.util.PropertyPlaceholderHelper: java.lang.String replacePlaceholders(java.lang.String,java.util.Properties)> ->_SANITIZER_
<org.jboss.resteasy.specimpl.UriBuilderImpl: javax.ws.rs.core.UriBuilder replaceMatrix(java.lang.String)> ->_SANITIZER_
<org.jboss.resteasy.util.Base64: java.lang.String encodeBytes(byte[],int)> ->_SANITIZER_
<org.zkoss.zk.ui.Executions: java.net.URL encodeToURL(java.lang.String)> ->_SANITIZER_
<org.zkoss.lang.Strings: java.lang.StringBuffer encode(java.lang.StringBuffer,int)> ->_SANITIZER_
<org.apache.commons.codec.net.QuotedPrintableCodec: void encodeQuotedPrintable(int,java.io.ByteArrayOutputStream)> ->_SANITIZER_
<org.apache.commons.httpclient.URI: char[] encode(java.lang.String,java.util.BitSet,java.lang.String)> ->_SANITIZER_
<org.apache.commons.codec.language.DoubleMetaphone: java.lang.String encode(java.lang.String)> ->_SANITIZER_
<org.parosproxy.paros.core.scanner.VariantGWTQuery: java.lang.String encodeParameter(java.lang.String,boolean,boolean)> ->_SANITIZER_
<org.apache.xerces.dom.TextImpl: org.w3c.dom.Text replaceWholeText(java.lang.String)> ->_SANITIZER_
<org.zkoss.util.Maps: void encode(java.lang.StringBuffer,java.lang.String,java.lang.String)> ->_SANITIZER_
<org.springframework.util.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)> ->_SANITIZER_
<org.parosproxy.paros.extension.report.ReportGenerator: java.lang.String entityEncode(java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang.StringUtils: java.lang.String replaceOnce(java.lang.String,java.lang.String,java.lang.String)> ->_SANITIZER_
<org.apache.commons.httpclient.util.URIUtil: java.lang.String encodeAll(java.lang.String,java.lang.String)> ->_SANITIZER_
<edu.berkeley.nlp.lm.io.LmReaders: edu.berkeley.nlp.lm.ContextEncodedProbBackoffLm readContextEncodedLmFromArpa(edu.berkeley.nlp.lm.io.LmReader,edu.berkeley.nlp.lm.WordIndexer,edu.berkeley.nlp.lm.ConfigOptions)> ->_SANITIZER_
<org.apache.avro.io.BinaryData: int encodeBoolean(boolean,byte[],int)> ->_SANITIZER_
<edu.berkeley.nlp.lm.io.LmReaders: edu.berkeley.nlp.lm.ArrayEncodedProbBackoffLm readArrayEncodedLmFromArpa(edu.berkeley.nlp.lm.io.LmReader,boolean,edu.berkeley.nlp.lm.WordIndexer,edu.berkeley.nlp.lm.ConfigOptions)> ->_SANITIZER_
<org.jboss.resteasy.specimpl.UriInfoImpl: void addEncodedPathParameter(java.lang.String,java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang3.CharUtils: java.lang.String unicodeEscaped(java.lang.Character)> ->_SANITIZER_
<org.zaproxy.zap.utils.XMLStringUtil: java.lang.String escapeControlChrs(java.lang.String)> ->_SANITIZER_
<javax.servlet.http.HttpServletResponseWrapper: java.lang.String encodeRedirectURL(java.lang.String)> ->_SANITIZER_
<org.apache.avro.io.parsing.ResolvingGrammarGenerator: void encode(org.apache.avro.io.Encoder,org.apache.avro.Schema,org.codehaus.jackson.JsonNode)> ->_SANITIZER_
<javax.servlet.http.HttpServletResponseWrapper: java.lang.String encodeRedirectUrl(java.lang.String)> ->_SANITIZER_
<org.jboss.resteasy.util.Base64: java.lang.String encodeBytes(byte[])> ->_SANITIZER_
<org.apache.commons.lang3.StringUtils: java.lang.String stripToEmpty(java.lang.String)> ->_SANITIZER_
<org.geotools.gml.producer.GMLUtils: java.lang.String encodeXML(java.lang.String)> ->_SANITIZER_
<org.codehaus.plexus.util.StringUtils: java.lang.String strip(java.lang.String,java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang3.text.StrSubstitutor: java.lang.String replace(java.lang.StringBuffer)> ->_SANITIZER_
<zemberek.core.io.Words: java.lang.String capitalize(java.lang.String,char[])> ->_SANITIZER_
<org.tukaani.xz.FilterOptions: int getEncoderMemoryUsage(org.tukaani.xz.FilterOptions[])> ->_SANITIZER_
<edu.berkeley.nlp.lm.io.LmReaders: edu.berkeley.nlp.lm.ArrayEncodedProbBackoffLm readArrayEncodedLmFromArpa(java.lang.String,boolean,edu.berkeley.nlp.lm.WordIndexer)> ->_SANITIZER_
<org.apache.commons.lang.text.StrSubstitutor: java.lang.String replace(java.lang.Object,java.util.Properties)> ->_SANITIZER_
<org.jboss.resteasy.util.PathHelper: java.lang.String replaceEnclosedCurlyBraces(java.lang.String)> ->_SANITIZER_
<javax.servlet.http.NoBodyResponse: java.lang.String encodeRedirectUrl(java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang.text.StrSubstitutor: java.lang.String replace(char[],int,int)> ->_SANITIZER_
<javax.servlet.http.NoBodyResponse: java.lang.String encodeRedirectURL(java.lang.String)> ->_SANITIZER_
<org.apache.commons.httpclient.util.URIUtil: java.lang.String encodeWithinAuthority(java.lang.String)> ->_SANITIZER_
<com.google.common.escape.CharEscaperBuilder: com.google.common.escape.CharEscaperBuilder addEscapes(char[],java.lang.String)> ->_SANITIZER_
<org.codehaus.plexus.util.StringUtils: java.lang.String quoteAndEscape(java.lang.String,char,char[])> ->_SANITIZER_
<org.parosproxy.paros.extension.encoder.Base64: byte[] encodeBytesToBytes(byte[],int,int,int)> ->_SANITIZER_
<org.apache.commons.lang.text.StrSubstitutor: java.lang.String replace(java.lang.Object,java.util.Map,java.lang.String,java.lang.String)> ->_SANITIZER_
<org.zkoss.lang.Strings: java.lang.StringBuffer encode(java.lang.StringBuffer,long)> ->_SANITIZER_
<org.apache.http.util.EncodingUtils: java.lang.String getString(byte[],java.lang.String)> ->_SANITIZER_
<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String formUrlEncode(org.apache.commons.httpclient.NameValuePair[],java.lang.String)> ->_SANITIZER_
<ch.csnc.extension.httpclient.SunPKCS11Configuration: java.lang.String escapeBackslashesAndQuotationMarks(java.lang.String)> ->_SANITIZER_
<org.parosproxy.paros.core.scanner.VariantFormQuery: java.lang.String getEncodedValue(org.parosproxy.paros.network.HttpMessage,java.lang.String)> ->_SANITIZER_
<org.zkoss.lang.Strings: java.lang.String encode(int)> ->_SANITIZER_
<org.slf4j.helpers.MessageFormatter: boolean isEscapedDelimeter(java.lang.String,int)> ->_SANITIZER_
<org.jboss.resteasy.util.URLUtils: java.lang.String encodePathParamValue(java.lang.String)> ->_SANITIZER_
<com.google.common.hash.AbstractNonStreamingHashFunction: com.google.common.hash.HashCode hashUnencodedChars(java.lang.CharSequence)> ->_SANITIZER_
<org.zkoss.xml.XMLs: java.lang.String escapeXML(char)> ->_SANITIZER_
<org.apache.commons.lang.StringUtils: java.lang.String stripToEmpty(java.lang.String)> ->_SANITIZER_
<edu.berkeley.nlp.lm.io.LmReaders: edu.berkeley.nlp.lm.ContextEncodedProbBackoffLm readContextEncodedKneserNeyLmFromTextFile(java.util.List,edu.berkeley.nlp.lm.WordIndexer,int,edu.berkeley.nlp.lm.ConfigOptions)> ->_SANITIZER_
<org.apache.commons.lang3.StringUtils: java.lang.String prependIfMissing(java.lang.String,java.lang.CharSequence,java.lang.CharSequence[])> ->_SANITIZER_
<org.jboss.resteasy.util.Encode: java.lang.String encodeNonCodes(java.lang.String)> ->_SANITIZER_
<edu.berkeley.nlp.lm.io.LmReaders: edu.berkeley.nlp.lm.ArrayEncodedProbBackoffLm readArrayEncodedLmFromArpa(java.lang.String,boolean)> ->_SANITIZER_
<org.dom4j.dom.DOMComment: void replaceData(int,int,java.lang.String)> ->_SANITIZER_
<org.zkoss.zul.Image: java.lang.String getEncodedURL()> ->_SANITIZER_
<org.apache.commons.lang3.text.StrSubstitutor: java.lang.String replace(char[],int,int)> ->_SANITIZER_
<org.apache.commons.codec.binary.BaseNCodec: java.lang.String encodeAsString(byte[])> ->_SANITIZER_
<org.apache.http.util.EncodingUtils: java.lang.String getAsciiString(byte[])> ->_SANITIZER_
<org.codehaus.jackson.Base64Variant: char encodeBase64BitsAsChar(int)> ->_SANITIZER_
<org.zkoss.zkmax.zul.fusionchart.impl.Utils: java.lang.String escapeXML(char)> ->_SANITIZER_
<org.zkoss.zul.impl.LabelImageElement: java.lang.String getEncodedHoverURL()> ->_SANITIZER_
<org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding: boolean canEncode(java.lang.String)> ->_SANITIZER_
<org.tukaani.xz.common.EncoderUtil: void encodeVLI(java.io.OutputStream,long)> ->_SANITIZER_
<org.apache.commons.codec.net.URLCodec: java.lang.String encode(java.lang.String,java.lang.String)> ->_SANITIZER_
<org.zkoss.zul.Script: java.lang.String getEncodedSrcURL()> ->_SANITIZER_
<org.jboss.resteasy.util.Encode: java.lang.String encodeMatrixParam(java.lang.String)> ->_SANITIZER_
<org.springframework.util.PropertyPlaceholderHelper: java.lang.String replacePlaceholders(java.lang.String,org.springframework.util.PropertyPlaceholderHelper$PlaceholderResolver)> ->_SANITIZER_
<org.apache.commons.lang.Entities: java.lang.String escape(java.lang.String)> ->_SANITIZER_
<org.zkoss.image.Images: org.zkoss.image.Image encode(java.lang.String,java.awt.image.RenderedImage)> ->_SANITIZER_
<org.apache.avro.io.EncoderFactory: org.apache.avro.io.JsonEncoder jsonEncoder(org.apache.avro.Schema,java.io.OutputStream)> ->_SANITIZER_
<org.apache.commons.lang3.StringEscapeUtils: java.lang.String escapeJava(java.lang.String)> ->_SANITIZER_
<edu.berkeley.nlp.lm.io.LmReaders: edu.berkeley.nlp.lm.ContextEncodedProbBackoffLm readContextEncodedLmFromArpa(java.lang.String,edu.berkeley.nlp.lm.WordIndexer)> ->_SANITIZER_
<org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getString(byte[],java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang3.text.WordUtils: java.lang.String capitalizeFully(java.lang.String,char[])> ->_SANITIZER_
<org.apache.thrift.protocol.TBase64Utils: void encode(byte[],int,int,byte[],int)> ->_SANITIZER_
<org.codehaus.jackson.Base64Variant: int encodeBase64Chunk(int,byte[],int)> ->_SANITIZER_
<org.zkoss.json.JSONValue: java.lang.String escape(java.lang.String)> ->_SANITIZER_
<org.zkoss.image.encoder.ImageEncoders: java.lang.Class getEncoderClass(java.lang.String)> ->_SANITIZER_
<org.parosproxy.paros.network.HttpUtil: java.lang.String encodeURI(java.lang.String)> ->_SANITIZER_
<org.apache.commons.codec.net.QuotedPrintableCodec: java.lang.String encode(java.lang.String,java.lang.String)> ->_SANITIZER_
<org.zkoss.lang.JavaScriptEscapeUtil: boolean isOctalEscape(char[],int,int)> ->_SANITIZER_
<org.codehaus.jackson.Base64Variant: java.lang.String encode(byte[])> ->_SANITIZER_
<org.apache.commons.lang3.CharUtils: java.lang.String unicodeEscaped(char)> ->_SANITIZER_
<org.codehaus.jackson.io.JsonStringEncoder: byte[] encodeAsUTF8(java.lang.String)> ->_SANITIZER_
<edu.berkeley.nlp.lm.io.LmReaders: edu.berkeley.nlp.lm.ContextEncodedProbBackoffLm secondPassContextEncoded(edu.berkeley.nlp.lm.ConfigOptions,edu.berkeley.nlp.lm.io.LmReader,edu.berkeley.nlp.lm.WordIndexer,edu.berkeley.nlp.lm.io.FirstPassCallback,edu.berkeley.nlp.lm.array.LongArray[])> ->_SANITIZER_
<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])> ->_SANITIZER_
<org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding: boolean canEncodeChar(char)> ->_SANITIZER_
<org.apache.commons.codec.binary.Base32: void encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context)> ->_SANITIZER_
<org.jboss.resteasy.util.Base64: void encodeFileToFile(java.lang.String,java.lang.String)> ->_SANITIZER_
<org.parosproxy.paros.extension.encoder.Encoder: java.lang.String getIllegalUTF8Encode(java.lang.String,int)> ->_SANITIZER_
<org.zkoss.lang.Strings: java.lang.String encode(long)> ->_SANITIZER_
<org.codehaus.jackson.Base64Variant: byte encodeBase64BitsAsByte(int)> ->_SANITIZER_
<com.google.common.io.BaseEncoding: java.lang.String encode(byte[])> ->_SANITIZER_
<org.codehaus.plexus.util.StringUtils: java.lang.String replaceOnce(java.lang.String,java.lang.String,java.lang.String)> ->_SANITIZER_
<org.parosproxy.paros.extension.encoder.Base64: byte[] encode3to4(byte[],byte[],int,int)> ->_SANITIZER_
<org.parosproxy.paros.extension.encoder.Base64: byte[] encodeBytesToBytes(byte[])> ->_SANITIZER_
<openlr.encoder.OpenLREncoderParameter: java.util.List getPhysicalEncoders()> ->_SANITIZER_
<org.apache.commons.lang3.StringEscapeUtils: java.lang.String escapeJson(java.lang.String)> ->_SANITIZER_
<org.apache.thrift.transport.TFramedTransport: void encodeFrameSize(int,byte[])> ->_SANITIZER_
<org.apache.commons.codec.net.QuotedPrintableCodec: java.lang.String encode(java.lang.String)> ->_SANITIZER_
<org.codehaus.plexus.util.Base64: byte[] encodeBase64Chunked(byte[])> ->_SANITIZER_
<org.zkoss.zkmax.zul.Fusionchart: java.lang.String getEncodedURL(java.lang.String)> ->_SANITIZER_
<org.apache.commons.codec.net.RFC1522Codec: java.lang.String encodeText(java.lang.String,java.lang.String)> ->_SANITIZER_
<com.google.common.net.PercentEscaper: java.lang.String escape(java.lang.String)> ->_SANITIZER_
<org.parosproxy.paros.extension.encoder.Base64: void encodeFileToFile(java.lang.String,java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang.text.StrSubstitutor: java.lang.String replace(java.lang.String)> ->_SANITIZER_
<com.google.common.primitives.SignedBytes: java.lang.String join(java.lang.String,byte[])> ->_SANITIZER_
<org.slf4j.helpers.MessageFormatter: boolean isDoubleEscaped(java.lang.String,int)> ->_SANITIZER_
<org.zkoss.zul.Menuitem: java.lang.String getEncodedHref()> ->_SANITIZER_
<org.apache.commons.lang3.text.StrSubstitutor: java.lang.String replace(java.lang.Object,java.util.Map,java.lang.String,java.lang.String)> ->_SANITIZER_
<org.zkoss.lang.JavaScriptEscape: void escapeJavaScriptMinimal(char[],int,int,java.io.Writer)> ->_SANITIZER_
<org.parosproxy.paros.extension.encoder.Base64: java.lang.String encodeBytes(byte[],int,int)> ->_SANITIZER_
<org.apache.commons.lang3.StringEscapeUtils: java.lang.String escapeHtml4(java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang3.StringEscapeUtils: java.lang.String escapeHtml3(java.lang.String)> ->_SANITIZER_
<org.zkoss.lang.Strings: java.lang.String encodeUnicode(int)> ->_SANITIZER_
<com.google.common.hash.Funnels: com.google.common.hash.Funnel unencodedCharsFunnel()> ->_SANITIZER_
<org.apache.commons.vfs2.provider.UriParser: void appendEncoded(java.lang.StringBuilder,java.lang.String,char[])> ->_SANITIZER_
<org.apache.commons.lang3.text.StrSubstitutor: java.lang.String replace(java.lang.Object,java.util.Properties)> ->_SANITIZER_
<org.jboss.resteasy.util.URLUtils: java.lang.String encodeQueryNameOrValueNoParen(java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang.StringUtils: java.lang.String replaceEach(java.lang.String,java.lang.String[],java.lang.String[])> ->_SANITIZER_
<org.jboss.resteasy.util.Encode: javax.ws.rs.core.MultivaluedMap encode(javax.ws.rs.core.MultivaluedMap)> ->_SANITIZER_
<org.apache.commons.lang.text.StrSubstitutor: java.lang.String replace(org.apache.commons.lang.text.StrBuilder,int,int)> ->_SANITIZER_
<org.apache.commons.lang3.text.StrSubstitutor: java.lang.String replace(java.lang.Object,java.util.Map)> ->_SANITIZER_
<com.google.common.hash.AbstractStreamingHashFunction: com.google.common.hash.HashCode hashUnencodedChars(java.lang.CharSequence)> ->_SANITIZER_
<org.parosproxy.paros.core.scanner.AbstractPlugin: java.lang.String getURLEncode(java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang.text.StrSubstitutor: java.lang.String replace(java.lang.String,int,int)> ->_SANITIZER_
<zemberek.core.io.Words: java.lang.String uncapitalize(java.lang.String,char[])> ->_SANITIZER_
<org.apache.commons.codec.net.URLCodec: java.lang.String encode(java.lang.String)> ->_SANITIZER_
<org.zkoss.zk.ui.impl.PhantomExecution: java.lang.String encodeURL(java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang3.text.StrSubstitutor: java.lang.String replace(java.lang.Object)> ->_SANITIZER_
<org.jboss.resteasy.util.Base64: byte[] encode3to4(byte[],byte[],int,int)> ->_SANITIZER_
<org.apache.commons.codec.net.URLCodec: byte[] encodeUrl(java.util.BitSet,byte[])> ->_SANITIZER_
<zemberek.core.io.Chars: java.lang.String unicodeEscaped(char)> ->_SANITIZER_
<org.codehaus.jackson.Base64Variant: void encodeBase64Partial(java.lang.StringBuilder,int,int)> ->_SANITIZER_
<org.apache.commons.lang.WordUtils: java.lang.String initials(java.lang.String,char[])> ->_SANITIZER_
<zemberek.lm.compression.DataInfo: byte[] encode2(int,int,int)> ->_SANITIZER_
<org.springframework.util.DigestUtils: char[] encodeHex(byte[])> ->_SANITIZER_
<org.apache.thrift.EncodingUtils: void encodeBigEndian(int,byte[])> ->_SANITIZER_
<org.parosproxy.paros.core.scanner.VariantJSONQuery: java.lang.String encodeParameter(java.lang.String,boolean,boolean)> ->_SANITIZER_
<org.codehaus.plexus.util.IOUtil: java.lang.String toString(byte[],java.lang.String)> ->_SANITIZER_
<com.mchange.v2.sql.SqlUtils: java.lang.String escapeAsTimestamp(java.util.Date)> ->_SANITIZER_
<org.jboss.resteasy.util.Encode: java.lang.String encodeQueryString(java.lang.String)> ->_SANITIZER_
<org.apache.commons.httpclient.util.URIUtil: java.lang.String encodeWithinPath(java.lang.String,java.lang.String)> ->_SANITIZER_
<org.json.simple.JSONValue: java.lang.String escape(java.lang.String)> ->_SANITIZER_
<org.apache.commons.lang.text.StrSubstitutor: java.lang.String replace(org.apache.commons.lang.text.StrBuilder)> ->_SANITIZER_
<org.zkoss.zul.Image: java.lang.String getEncodedHoverURL()> ->_SANITIZER_
<org.codehaus.plexus.util.Base64: byte[] encodeBase64(byte[])> ->_SANITIZER_
<org.apache.commons.lang3.StringUtils: java.lang.String replaceEach(java.lang.String,java.lang.String[],java.lang.String[])> ->_SANITIZER_
<org.parosproxy.paros.extension.encoder.Encoder: java.lang.String getBase64Encode(java.lang.String)> ->_SANITIZER_
